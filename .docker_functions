#!/bin/bash
export DOCKER_REPO=jmutai

dock () {
   sudo systemctl restart docker
   nginx
} 

images_backup () {
    docker images | grep -v REPOSITORY | awk '{print $1}' \
        | xargs -d "\n" -I {} docker save {} -o docker-images/{}.tar
}

clean_btrfs () {
   sudo  btrfs subvolume delete  /var/lib/docker/btrfs/subvolumes/*
}
dock_full_clean () {
    sudo systemctl stop docker.service
    sudo systemctl stop docker.socket
    sudo rm -rf /var/lib/docker/
    sudo btrfs subvolume list /var/lib/docker|awk '/ID/ {print "/"$9}'|xargs btrfs sub delete
}


dockpid (){
docker inspect -f "{{ .State.Pid }}" $1
}

# Delete stopped container
cont_del () {
    local cont_name="$1"
    #local cont_state=`docker inspect --format "{{.State.Running}}" "$cont_name" 2>/dev/null`
    #if [[ "$state" == "false" ]]; then
    docker rm -f "$cont_name" && dockclean "$cont_name"
#fi
}

# Clean docker environment
dockclean () {
    # docker ps ${1} 2>/dev/null | xargs -r docker rm  
    docker rm -f ${1} 2>/dev/null
#    docker ps --filter status=exited -q 2>/dev/null | xargs -r docker rm 
#    docker images --filter dangling=true -q 2>/dev/null | xargs -r docker rmi  
#    docker volume ls -qf dangling=true | xargs -r docker volume rm 
#
#    # remove unused images:
#    docker images --no-trunc | grep '<none>' | awk '{ print $3 }' | xargs -r docker rmi
 
    # remove unused volumes:
    #sudo find '/var/lib/docker/volumes/' -mindepth 1 -maxdepth 1 -type d | grep -vFf <(
    #sudo docker ps -aq | xargs docker inspect | jq -r '.[] | .Mounts | .[] | .Name | select(.)') | xargs -r rm -fr

#sh ~/dockerfiles/docker-clean/docker-clean
}


dockclean_all () {
     docker ps -aq 2>/dev/null | xargs -r docker rm -f  
    docker ps --filter status=exited -q 2>/dev/null | xargs -r docker rm 
    docker images --filter dangling=true -q 2>/dev/null | xargs -r docker rmi  
    docker volume ls -qf dangling=true | xargs -r docker volume rm 

    # remove unused images:
    docker images --no-trunc | grep '<none>' | awk '{ print $3 }' | xargs -r docker rmi
}

# Delete images with none repo name
imgrem () {
    docker images | grep "^<none>" | awk '{print $3}' | xargs -I {} docker rmi {}
}

# Get docker container ip address
dockip () {
    local cont=${1:-}
    if [ -n "$cont" ]; then
        docker inspect --format "{{.NetworkSettings.Networks.bridge.IPAddress}}" ${cont}
    else
        echo ""
        echo "Provide container name"
    fi
}

# Function to remove running containers
dockstop_all () {
    echo ""
    docker ps -qa | xargs -I {} docker stop {}
}

dockstop () {
    docker stop "$1" 2>/dev/null
    dockclean $1
}

dockshell () {
    docker exec -it ${1} /bin/bash
}

# Dump all sql databases on dabase container
dockdumpsql () {
    docker exec some-mariadb sh -c 'exec mysqldump --all-databases -uroot -p"$MYSQL_ROOT_PASSWORD"' > /some/path/on/your/host/all-databases.sql
}
# Caddy web server alpine based container
caddy () {
    cont_del caddy 2>/dev/null
    docker run  \
    -p 80:80 \
    -p 443:443 \
    -v /srv/http/jmutai:/www/html/ \
    --name caddy \
    jmutai/caddy  "$@"
}

# Transmission container based on alpine
transmission () { 
    cont_del transmission 2>/dev/null
    docker run -d --name transmission \
        -p 9091:9091 \
        -p 51413:51413/tcp \
        -p 51413:51413/udp \
        -v "${HOME}"/Torrents/downloads:/transmission/downloads \
        -v "${HOME}"/Torrents/incomplete:/transmission/incomplete \
        -v "${HOME}"/Downloads:/transmission/watch \
        -e "USERNAME=admin" \
        -e "PASSWORD=password" \
        jmutai/transmission "$@"
}

centos () {
     sudo mount -o loop ~/iso/CentOS-7-x86_64-Everything-1611.iso  /srv/http/cent7
     docker run -it --rm \
         --name cent7 \
         -e "container=docker" \
         -e XTERM="term" \
         -v ~/docker-env/local.repo:/etc/yum.repos.d/local.repo \
         -h cent7.example.com \
         centos /bin/bash 
 }

 rhel7 (){
     docker run -it --rm \
         --name rhel7 \
         --privileged  \
         -e "container=docker" \
         --cap-add SYS_ADMIN \
         --stop-signal=SIGRTMIN+3 \
         --security-opt=seccomp:unconfined \
         -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
         -h rhel7.example.com \
         registry.access.redhat.com/rhel7.3 \
        /usr/sbin/init 
 }

# Mariadb docker start function
# docker network create --driver overlay main-net

makip () { 
    export ROOT_PASSWORD="kipepeo"
    docker run -d \
        --name makip \
        -p 3306:3306 \
        -v /var/lib/mysql:/var/lib/mysql \
        -e MYSQL_ROOT_PASSWORD=$ROOT_PASSWORD \
        -e MYSQL_USER=kipepeo \
        -e MYSQL_PASSWORD=$WORDPRESS_PASSWORD \
        -e MYSQL_DATABASE=kipepeo \
        mariadb "$@"
}

wpkip () {
    export WORDPRESS_PASSWORD="kipepeo"
    docker run -it \
        -p 80:80 \
        --name wpkip \
        -e WORDPRESS_DB_HOST=makip:3306 \
        -e WORDPRESS_DB_USER=wordpress \
        -e WORDPRESS_DB_PASSWORD=$WORDPRESS_PASSWORD \
        --link makip \
        wordpress "$@"
}

wp () {
    cd ~/dockerfiles/wordpress-compose
    sh ./build.sh
}

wpclean () {
    cd ~/dockerfiles/wordpress-compose
    docker-compose stop; dockclean  
}

wpfix () {
    docker exec -d wp-kipepeo chmod 777 /var/www/html/wp-content/uploads/
}

wpbash () {
docker exec -it  wp-kipepeo /bin/bash
}

dbbash () {
docker exec -it  mariadb-kipepeo /bin/bash
}

# docker pull hurricane/teamviewer
teamv () {
    xhost +
    docker run  --rm --name teamviewer \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=$DISPLAY \
        jmutai/teamviewer /etc/init.d/teamviewerd start && teamviewer
}



cent7 () {
docker run -it --rm \
    --name cent7 \
    -v ~/docker-env/local.repo:/etc/yum.repos.d/local.repo \
    centos
}

fire () {
    xhost +
    docker run -d \
        --name firefox \
        --memory 2gb \
        --cpuset-cpus 0 \
        --net host \
        -e DISPLAY=$DISPLAY \
        -h $(hostname) \
        --device /dev/snd \
        --device /dev/dri \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -v $HOME/.mozilla:$HOME/.mozilla \
        -v $HOME/Downloads:$HOME/Downloads \
        -v $HOME/Documents:$HOME/Documents \
        -v /etc/machine-id:/etc/machine-id:ro \
        jmutai/firefox firefox
}



docknet () {
    echo -en "Enter IP/SUBNET: "
    read net_subnet
    echo -en "Enter Network name: "
    read net_name
    if [[ "$net_name" == "" || "$net_subnet" == "" ]]; then
       echo ""
       echo "Provide subnet and network name"
   else
       docker network create \
           --driver bridge \
           --subnet "${net_subnet}" \
           "${net_name}" 
   fi
   }


spotify () {
    xhost +
	cont_del spotify 2>/dev/null
	docker run --rm   \
		-v /etc/localtime:/etc/localtime:ro \
		-v /tmp/.X11-unix:/tmp/.X11-unix \
		-e DISPLAY=$DISPLAY \
        --net host \
		-e QT_DEVICE_PIXEL_RATIO \
		--security-opt seccomp:unconfined \
		--device /dev/snd \
		--device /dev/dri \
		--group-add audio \
		--group-add video \
		--name spotify \
		${DOCKER_REPO}/spotify
}

cs1 () {
#cont_del ${1} 2>/dev/null
#echo -en "Enter Cont name: " 
#read NAME
#echo -en "Enter Hostname: " 
#read HOST_NAME
#echo -en "Enter IP Address: " 
#read IP_ADDRESS

NAME=${NAME:-"$1"}
HOST_NAME=${HOST_NAME:-"$2"}
IP_ADDRESS=${IP_ADDRESS:-"$3"}

if [[ "$NAME" == "" || "$HOST_NAME" == "" || "$IP_ADDRESS" == "" ]]; then
    echo ""
    echo "USAGE: ${0##*/} <Argument>"                                                                                                                                 
    echo "Arguments:"
    echo -e "\t1\tContainer Name"
    echo -e "\t2\tHost name"
    echo -e "\t3\tIP address: 192.168.2.x for rhce_bridge"
else
    docker run -d --name ${NAME} \
        --hostname ${HOST_NAME} \
        --net rhce_bridge \
        --ip ${IP_ADDRESS} \
        --privileged \
        -e NAME=${NAME} \
        -e HOSTNAME=${HOST_NAME} \
        -e IP=${IP_ADDRESS} \
        -v ~/docker-env/local.repo:/etc/yum.repos.d/local.repo \
        -v /etc/localtime:/etc/localtime:ro \
        -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
        -e "container=docker" \
        $DOCKER_REPO/centos 
fi
}

cs1s () {
docker exec -it ${1} /bin/bash
}


nginx () {
dockstop nginx 2>/dev/null
docker rm nginx 2>/dev/null
docker run -d --name nginx \
    -p 8090:80 \
    -v /srv/http:/usr/share/nginx/html \
    -v ${HOME}/docker-env/nginx.conf:/etc/nginx/nginx.conf \
    nginx
}

cadvisor () {
sudo docker run \
  --volume=/:/rootfs:ro \
  --volume=/var/run:/var/run:rw \
  --volume=/sys:/sys:ro \
  --volume=/var/lib/docker/:/var/lib/docker:ro \
  --publish=8080:8080 \
  --detach=true \
  --name=cadvisor \
  google/cadvisor:latest
}

wp_stop () {
    cd ~/rafikihost.co.ke  && docker-compose stop
}

wp_start () {
    cd ~/rafikihost.co.ke  && docker-compose up -d
}

function mydnsmasq {
    docker run --rm  --name dnsmasq \
        --cap-add=NET_ADMIN \
        --net=host \
         -d -q --dhcp-range=192.168.2.10,192.168.1.20 \
        --enable-tftp \
        --tftp-root=/var/lib/tftpboot \
        --dhcp-userclass=set:ipxe,iPXE \
        --dhcp-boot=tag:#ipxe,undionly.kpxe \
        --dhcp-boot=tag:ipxe,http://matchbox.foo:8080/boot.ipxe \
        --address=/matchbox.foo/192.168.1.2 --log-queries --log-dhcp \
        quay.io/coreos/dnsmasq
}

mariadb () {
docker run --name mariadb -d \
    -p 3306:3306  \
    --net host \
    -e MYSQL_ROOT_PASSWORD=password \
    -v ~/db_data:/var/lib/mysql \
    mariadb
}

mympsyt () {
    xhost +local:docker
    docker run --rm -it \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=$DISPLAY \
        --device /dev/snd \
        --device  /dev/dri \
        -e uid=$(id -u) \
        -e gid=$(id -g) \
        --privileged \
        --name mpsyt \
        jmutai/mpsyt set show_video true
}

manageiq () {
    docker run -di \
         --privileged \
         --name manageiq \
         -v /etc/localtime:/etc/localtime:ro \
         -p 8080:80 \
         -p 8443:443 \
         manageiq/manageiq \
}

elk () {
    if [[ ! -d ~/elasticsearch || ! -d ~/ossec_mnt ]]; then
        mkdir ~/elasticsearch 2>/dev/null
        mkdir ~/ossec_mnt 2>/dev/null
    fi
    
docker run -d -p 55000:55000 \
    -p 1514:1514/udp \
    -p 1515:1515 \
    -p 5601:5601 \
    -v ~/elasticsearch:/var/lib/elasticsearch \
    -v ~/ossec_mnt:/var/ossec/data \
    --name ossec \
    wazuh/ossec-elk
    }

portainer () {
    docker run -d \
        --name portainer \
        -p 9000:9000 \
        portainer/portainer
    }
